import type { ImportTaskKey } from '~/types'

type ProductHint = {
  vendor: string
  product: string
  keywords?: string[]
  patterns?: RegExp[]
}

const normaliseKeywords = (keywords: string[] | undefined): string[] => {
  if (!keywords?.length) {
    return []
  }
  return keywords.map(keyword => keyword.toLowerCase())
}

export const PRODUCT_HINTS: ProductHint[] = [
  {
    vendor: 'Microsoft',
    product: 'Windows',
    keywords: [
      'microsoft windows',
      'windows server',
      'windows 10',
      'windows 11',
      'windows 7',
      'windows xp'
    ]
  },
  {
    vendor: 'Microsoft',
    product: 'Exchange Server',
    keywords: ['microsoft exchange', 'exchange server', 'owa'],
    patterns: [/outlook web access/i, /outlook web app/i]
  },
  {
    vendor: 'Microsoft',
    product: 'SharePoint',
    keywords: ['sharepoint']
  },
  {
    vendor: 'Microsoft',
    product: 'Internet Information Services',
    keywords: ['internet information services', 'microsoft iis'],
    patterns: [/\biis\b/i]
  },
  {
    vendor: 'Cisco',
    product: 'Adaptive Security Appliance',
    keywords: ['cisco asa', 'adaptive security appliance'],
    patterns: [/anyconnect/i]
  },
  {
    vendor: 'Cisco',
    product: 'IOS XE',
    keywords: ['ios xe', 'ios-xe']
  },
  {
    vendor: 'Cisco',
    product: 'Firepower',
    keywords: ['cisco firepower']
  },
  {
    vendor: 'Citrix',
    product: 'NetScaler ADC',
    keywords: ['citrix adc', 'netscaler adc', 'citrix netscaler']
  },
  {
    vendor: 'Citrix',
    product: 'Gateway',
    keywords: ['citrix gateway']
  },
  {
    vendor: 'Fortinet',
    product: 'FortiGate',
    keywords: ['fortigate', 'fortios'],
    patterns: [/forti(web|proxy|wan)/i]
  },
  {
    vendor: 'Palo Alto Networks',
    product: 'PAN-OS',
    keywords: ['pan-os', 'pan os'],
    patterns: [/globalprotect/i]
  },
  {
    vendor: 'Ivanti',
    product: 'Connect Secure',
    keywords: ['pulse secure', 'ivanti connect secure', 'pulse connect secure']
  },
  {
    vendor: 'Ivanti',
    product: 'Endpoint Manager Mobile',
    keywords: ['endpoint manager mobile', 'epmm']
  },
  {
    vendor: 'Progress',
    product: 'MOVEit Transfer',
    keywords: ['moveit transfer']
  },
  {
    vendor: 'Progress',
    product: 'WS_FTP Server',
    keywords: ['ws_ftp server', 'ws-ftp', 'wsftp']
  },
  {
    vendor: 'F5 Networks',
    product: 'BIG-IP',
    keywords: ['big-ip', 'f5 bigip', 'f5 big-ip']
  },
  {
    vendor: 'Juniper Networks',
    product: 'Junos',
    keywords: ['junos', 'srx']
  },
  {
    vendor: 'HPE Aruba',
    product: 'EdgeConnect',
    keywords: ['aruba edgeconnect', 'silverpeak']
  },
  {
    vendor: 'VMware',
    product: 'vCenter Server',
    keywords: ['vcenter server', 'vsphere client']
  },
  {
    vendor: 'VMware',
    product: 'ESXi',
    keywords: ['vmware esxi', 'esxi host']
  },
  {
    vendor: 'Atlassian',
    product: 'Confluence',
    keywords: ['confluence'],
    patterns: [/atlassian confluence/i]
  },
  {
    vendor: 'Atlassian',
    product: 'Jira',
    keywords: ['jira software', 'jira service desk', 'jira core'],
    patterns: [/atlassian jira/i]
  },
  {
    vendor: 'Apache',
    product: 'Log4j',
    keywords: ['log4j', 'log4shell']
  },
  {
    vendor: 'Apache',
    product: 'Struts',
    keywords: ['apache struts']
  },
  {
    vendor: 'Oracle',
    product: 'WebLogic',
    keywords: ['weblogic']
  },
  {
    vendor: 'Oracle',
    product: 'Solaris',
    keywords: ['solaris']
  },
  {
    vendor: 'SAP',
    product: 'SAP NetWeaver',
    keywords: ['sap netweaver']
  },
  {
    vendor: 'SAP',
    product: 'SAP Solution Manager',
    keywords: ['sap solman', 'solution manager']
  },
  {
    vendor: 'Adobe',
    product: 'ColdFusion',
    keywords: ['coldfusion']
  },
  {
    vendor: 'Qlik',
    product: 'Qlik Sense',
    keywords: ['qlik sense']
  },
  {
    vendor: 'Qlik',
    product: 'QlikView',
    keywords: ['qlikview']
  },
  {
    vendor: 'Commvault',
    product: 'Commvault Command Center',
    keywords: ['commvault', 'command center']
  },
  {
    vendor: 'Progress',
    product: 'WhatsUp Gold',
    keywords: ['whatsup gold', 'whats up gold']
  },
  {
    vendor: 'Zoho',
    product: 'ManageEngine ServiceDesk Plus',
    keywords: ['servicedesk plus']
  },
  {
    vendor: 'Zoho',
    product: 'ManageEngine ADManager Plus',
    keywords: ['admanager plus']
  },
  {
    vendor: 'Zoho',
    product: 'ManageEngine Endpoint Central',
    keywords: ['endpoint central', 'desktop central']
  },
  {
    vendor: 'SolarWinds',
    product: 'Serv-U Managed File Transfer',
    keywords: ['serv-u']
  },
  {
    vendor: 'JetBrains',
    product: 'TeamCity',
    keywords: ['teamcity']
  },
  {
    vendor: 'GitLab',
    product: 'GitLab',
    keywords: ['gitlab']
  },
  {
    vendor: 'Progress',
    product: 'Telerik UI',
    keywords: ['telerik']
  },
  {
    vendor: 'Ivanti',
    product: 'Neurons',
    keywords: ['ivanti neurons']
  },
  {
    vendor: 'Zoho',
    product: 'ManageEngine OpManager',
    keywords: ['opmanager']
  },
  {
    vendor: 'Zoho',
    product: 'ManageEngine ADAudit Plus',
    keywords: ['adaudit plus']
  },
  {
    vendor: 'Zoho',
    product: 'ManageEngine Password Manager Pro',
    keywords: ['password manager pro']
  },
  {
    vendor: 'Zoho',
    product: 'ManageEngine Patch Manager Plus',
    keywords: ['patch manager plus']
  }
]

const normalisedHintCache = new WeakMap<ProductHint, string[]>()

const getNormalisedKeywords = (hint: ProductHint): string[] => {
  let cached = normalisedHintCache.get(hint)
  if (!cached) {
    cached = normaliseKeywords(hint.keywords)
    normalisedHintCache.set(hint, cached)
  }
  return cached
}

export const matchExploitProduct = (
  text: string
): { vendor: string; product: string } | null => {
  if (!text) {
    return null
  }
  const lower = text.toLowerCase()

  for (const hint of PRODUCT_HINTS) {
    const keywords = getNormalisedKeywords(hint)
    if (keywords.some(keyword => lower.includes(keyword))) {
      return { vendor: hint.vendor, product: hint.product }
    }
    if (hint.patterns?.some(pattern => pattern.test(text))) {
      return { vendor: hint.vendor, product: hint.product }
    }
  }

  return null
}

export const describeTaskKey = (key: ImportTaskKey): string => {
  switch (key) {
    case 'kev':
      return 'CISA KEV catalog'
    case 'enisa':
      return 'ENISA exploited catalog'
    case 'historic':
      return 'Historic exploit dataset'
    case 'metasploit':
      return 'Metasploit catalog'
    case 'market':
      return 'Market intelligence offers'
    default:
      return key
  }
}
